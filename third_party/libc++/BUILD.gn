# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/sanitizers/sanitizers.gni")
import("//build/toolchain/toolchain.gni")

# Sanitizer builds need to override operator new, operator delete, and
# some exception handling symbols, so libc++ must be a shared library
# to prevent duplicate symbol errors when linking.
libcpp_is_static = !is_component_build && !using_sanitizer

# Used by libc++ and libc++abi.
config("config") {
  defines = [ "LIBCXX_BUILDING_LIBCXXABI" ]
  if (libcpp_is_static) {
    # Don't leak any symbols on a static build.
    defines += [
      "_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS",
      "_LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS",

      # This resets the visibility to default only for the various
      # flavors of operator new and operator delete.  These symbols
      # are weak and get overriden by Chromium-provided ones, but if
      # these symbols had hidden visibility, this would make the
      # Chromium symbols hidden too because elf visibility rules
      # require that linkers use the least visible form when merging,
      # and if this is hidden, then when we merge it with tcmalloc's
      # operator new, hidden visibility would win. However, tcmalloc
      # needs a visible operator new to also override operator new
      # references from system libraries.
      # TODO(lld): Ask lld for a --force-public-visibility flag or
      # similar to that overrides the default elf merging rules, and
      # make tcmalloc's gn config pass that to all its dependencies,
      # then remove this override here.
      "_LIBCPP_OVERRIDABLE_FUNC_VIS=__attribute__((__visibility__(\"default\")))",
    ]
  }
  cflags = [
    "-fPIC",
    "-fstrict-aliasing",
  ]
  cflags_cc = [
    "-nostdinc++",
    "-isystem" + rebase_path("trunk/include", root_build_dir),
    "-isystem" + rebase_path("../libc++abi/trunk/include", root_build_dir),
    "-std=c++11",
  ]
  if (is_linux && current_cpu == "arm") {
    cflags_c = [ "-isystem" +
                 rebase_path("../libunwind/trunk/include", root_build_dir) ]
    cflags_cc += [ "-isystem" +
                   rebase_path("../libunwind/trunk/include", root_build_dir) ]
  }
}

config("no_libstdcpp") {
  # Make sure we don't link against libc++ or libstdc++.
  ldflags = [ "-nodefaultlibs" ]

  # Unfortunately, there's no way to disable linking against just
  # libc++ (besides using clang instead of clang++); -nodefaultlibs
  # removes all of the default libraries, so add back the ones that we
  # need.
  libs = [
    "c",
    "m",
  ]

  if (!is_mac) {
    libs += [
      "gcc_s",
      "rt",
    ]
  }

  if (is_mac && using_sanitizer) {
    lib_dirs = [ "//third_party/llvm-build/Release+Asserts/lib/clang/$clang_version/lib/darwin" ]

    if (is_asan) {
      libs += [ "clang_rt.asan_osx_dynamic" ]
    }
  }
}

if (libcpp_is_static) {
  link_target_type = "source_set"
} else {
  link_target_type = "shared_library"
}
target(link_target_type, "libc++") {
  sources = [
    "trunk/src/algorithm.cpp",
    "trunk/src/any.cpp",
    "trunk/src/bind.cpp",
    "trunk/src/chrono.cpp",
    "trunk/src/condition_variable.cpp",
    "trunk/src/debug.cpp",
    "trunk/src/exception.cpp",
    "trunk/src/functional.cpp",
    "trunk/src/future.cpp",
    "trunk/src/hash.cpp",
    "trunk/src/ios.cpp",
    "trunk/src/iostream.cpp",
    "trunk/src/locale.cpp",
    "trunk/src/memory.cpp",
    "trunk/src/mutex.cpp",
    "trunk/src/new.cpp",
    "trunk/src/optional.cpp",
    "trunk/src/random.cpp",
    "trunk/src/regex.cpp",
    "trunk/src/shared_mutex.cpp",
    "trunk/src/stdexcept.cpp",
    "trunk/src/string.cpp",
    "trunk/src/strstream.cpp",
    "trunk/src/system_error.cpp",
    "trunk/src/thread.cpp",
    "trunk/src/typeinfo.cpp",
    "trunk/src/utility.cpp",
    "trunk/src/valarray.cpp",
    "trunk/src/variant.cpp",
  ]
  configs -= [
    "//build/config/compiler:chromium_code",
    "//build/config/compiler:no_rtti",
    "//build/config/gcc:no_exceptions",
  ]
  configs += [
    ":config",
    ":no_libstdcpp",
    "//build/config/compiler:no_chromium_code",
    "//build/config/compiler:rtti",
    "//build/config/sanitizers:sanitizer_options_link_helper",
  ]
  defines = [ "_LIBCPP_BUILDING_LIBRARY" ]

  deps = [
    "//buildtools/third_party/libc++abi",
  ]
}

group("libcxx_proxy") {
  deps = [
    ":libc++",
  ]
  public_configs = [ ":no_libstdcpp" ]
}
